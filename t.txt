        gps-entity-place="latitude: -6.673610; longitude: 146.993093;"

       
     AFRAME.registerComponent('locationFinder',{
        init:function() {
            navigator.geolocation.getCurrentPosition(function(position){
             console.log(position)
         })
        }
    })


https://www.youtube.com/watch?v=2NjaV0JRBjc

    arjs.startGps(-6.673296234598212, 146.99258577828653);//specific to arjs

AFRAME.registerComponent('markerhandler', {

    init: function() {
        const animatedMarker = document.querySelector("#animated-marker");
        const aEntity = document.querySelector("#animated-model");

        // every click, we make our model grow in size :)
        animatedMarker.addEventListener('click', function(ev, target){
            const intersectedElement = ev && ev.detail && ev.detail.intersectedEl;
            if (aEntity && intersectedElement === aEntity) {
                const scale = aEntity.getAttribute('scale');
                Object.keys(scale).forEach((key) => scale[key] = scale[key] + 1);
                aEntity.setAttribute('scale', scale);
            }
        });
}});



AFRAME.registerComponent('markerhandler', {

    init: function() {
        const animatedMarker = document.querySelector("#animated-marker");
        const aEntity = document.querySelector("#animated-model");

        // every click, we make our model grow in size :)
        animatedMarker.addEventListener('click', function(ev, target){
            const intersectedElement = ev && ev.detail && ev.detail.intersectedEl;
            if (aEntity && intersectedElement === aEntity) {
                const scale = aEntity.getAttribute('scale');
                Object.keys(scale).forEach((key) => scale[key] = scale[key] + 1);
                aEntity.setAttribute('scale', scale);
            }
        });
}});

AFRAME.registerComponent('markerhandler', {

    init: function() {
        const animatedMarker = document.querySelector("#animated-marker");
        const aEntity = document.querySelector("#animated-model");

        // every click, we make our model grow in size :)
        animatedMarker.addEventListener('click', function(ev, target){
            const intersectedElement = ev && ev.detail && ev.detail.intersectedEl;
            if (aEntity && intersectedElement === aEntity) {
                const scale = aEntity.getAttribute('scale');
                Object.keys(scale).forEach((key) => scale[key] = scale[key] + 1);
                aEntity.setAttribute('scale', scale);
            }
        });
}});



AFRAME.registerComponent('color-toggle', {
  init:function(){
    //ref to the compoment this is attached to
    let el=this.el;
    this.toggleColor=function(){
      alert('Clicked')
    }
    this.el.addEventListener('click',this.toggleColor)
  },
  remove:function(){
    this.el.removeEventListener('click',this.toggleColor)
  }
})

Intro to WebXR and A-Frame Part 4: Interactions, Raycasting, Components, and Event Listeners